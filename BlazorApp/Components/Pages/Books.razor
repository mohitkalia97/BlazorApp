@page "/books"
@inject IBookService _bookService
@rendermode InteractiveServer

<PageTitle> Books </PageTitle>

<form>
    <label for="title">Title:</label><br>
    <input type="text" id="title" @bind="newBook._title"><br>

    <label for="description">Description:</label><br>
    <input type="text" id="description" @bind="newBook._description"><br><br>

    <input type="submit" value="Add" @onclick="@HandleSubmit">
</form>

<TelerikGrid Data="@GridData"
             EditMode="@GridEditMode.Inline">
    <GridColumns>
        <GridColumn Field=@nameof(Models.Book.Id) Title="ID" Editable="false" />
        <GridColumn Field=@nameof(Models.Book._title)
                    EditorType="@GridEditorType.TextArea"
                    Title="Name" />
        <GridColumn Field="@nameof(Models.Book._description)" Editable="false" Title="Description" />
        <GridColumn Field="@nameof(Models.Book._created)" Editable="false" Title="Created On" />
        <GridCommandColumn>
            <GridCommandButton Command="Save" Icon="@SvgIcon.Save" ShowInEdit="true">Update</GridCommandButton>
            <GridCommandButton Command="Edit" Icon="@SvgIcon.Pencil">Edit</GridCommandButton>
        </GridCommandColumn>
    </GridColumns>
    
</TelerikGrid>


@code {
    private List<Models.Book> GridData { get; set; }
    private Models.Book newBook = new Models.Book();

    protected override void OnInitialized()
    {
        GridData = _bookService.getAllBooks();

        //base.OnInitialized();
    }

    private async Task HandleSubmit()
    {
        newBook._created = DateTime.UtcNow;
        await _bookService.addBook(newBook);
        GridData = _bookService.getAllBooks();
        StateHasChanged();
        // newBook = new Models.Book();
    }

}